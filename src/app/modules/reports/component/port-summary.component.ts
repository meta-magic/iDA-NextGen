import { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { ConfirmationService, FilterMatchMode, FilterService, MenuItem, MessageService, SelectItem } from 'primeng/api';
import { Table } from 'primeng/table';
import { Observable, Subscriber } from 'rxjs';
import { SharedService } from '../../common/service/shared.service';
import { PortSummaryReports } from '../model/port.summaryReport.model';
import { PortSummaryService } from '../service/port-summary.service';

@Component({
  selector: 'app-port-summary',
  templateUrl: './port-summary.component.html',
  styleUrls: ['./port-summary.component.scss']
})
export class PortSummaryComponent implements OnInit {

  reports: PortSummaryReports[]=[];
  sortOptions: SelectItem[];
  portSummaryReports:PortSummaryReports[]=[];
  sortOrder: number;

  columns:any[]=[];
  sortField: string;
  matchModeOptions: SelectItem[] = [];

  selectedColumns: any;
  selectedProducts: any[] = [];
  ganesh1= false;
  expanded = true;

  gg = true;
  constructor(private msgSvc: MessageService, private cookieService: CookieService,
    private router: Router, private activatedroute: ActivatedRoute,
   private sharedSvc: SharedService, public confirmSvc: ConfirmationService,
   public filterService: FilterService,public portSummarySer:PortSummaryService) { }

   items: MenuItem[];

   back:any;
   xyz:any;
  ngOnInit(): void {
    this.expanded = true ;
    this.back = this.portSummarySer.backEmitter.subscribe(msg=>{
      this.ganesh1 = false;
    });
    this.xyz = this.portSummarySer.generateReportEmitter.subscribe(msg=>{
      this.gg = true;
    })
    this.gg=true;
    const customFilterName = "custom-equals";
    this.filterService.register(
      customFilterName,
      (value: any, filter: any): boolean => {
        if (filter === undefined || filter === null || filter.trim() === "") {
          return true;
        }

        if (value === undefined || value === null) {
          return false;
        }

        return value.toString() === filter.toString();
      }
    );

    this.fetchReports();
    this.items = [
      {
          label: 'Update',
          icon: 'pi pi-refresh'
      },
      {
          label: 'Delete',
          icon: 'pi pi-times'
      },
      {
          label: 'Angular',
          icon: 'pi pi-external-link',
          url: 'http://angular.io'
      },
      {
          label: 'Router',
          icon: 'pi pi-upload',
          routerLink: '/fileupload'
      }
  ];
  this.columns = [
    { field: 'reportname', header: 'Report Name' },
    { field: 'sstatus', header: 'Scheduled Status' },
    { field: 'generatedby', header: 'Generated By' },
    { field: 'datetime', header: 'Date and Time' },
    { field: 'status', header: 'Status' }
  ];
  this.selectedColumns = this.columns;
  this.matchModeOptions = [
    { label: "Custom Equals", value: customFilterName },
    { label: "Starts With", value: FilterMatchMode.STARTS_WITH },
    { label: "End With", value: FilterMatchMode.ENDS_WITH },
    { label: "Contains", value: FilterMatchMode.CONTAINS }
  ];
  this.fetchposrtSummaryReport()
  }

  
  portsummaryreports:any;

  loder = false; 
  fetchReports() {
    this.loder = true;
    let response: any;
    this.reports = [];
    this.portSummarySer.fetchReports()
      .subscribe((resp: any) => {
        response = resp.data as PortSummaryReports[];
      }, (error: any) => {
        this.loder = false;
        this.msgSvc.add({ key: 'bc', severity: 'error', summary: 'Error', detail: 'Unable to fetch cities, if problem persist please connect with admin!' });
      }, () => {
        if (true) {
          this.reports = response;
          this.portSummaryReports = response;
        }
        this.loder = false;
      });
    }
    
    fetchposrtSummaryReport() {
      this.loder = true;
      let response: any;
      this.portsummaryreports = [];
      this.portSummarySer.fetchportsusmmaryReports()
        .subscribe((resp: any) => {
          response = resp;
        }, (error: any) => {
          this.loder = false;
          this.msgSvc.add({ key: 'bc', severity: 'error', summary: 'Error', detail: 'Unable to fetch cities, if problem persist please connect with admin!' });
        }, () => {
          if (response.success) {
            this.portsummaryreports = response.data;
          }
          this.loder = false;
        });
    }

    
  clear(table: Table) {
    table.clear();
  }

    

  @Input() get SelectedColumns(): any[] {
    return this.selectedColumns;
  }

  set SelectedColumns(val: any[]) {
    //restore original order
    this.selectedColumns = this.columns.filter(col => val.includes(col));
  }

    deleteProduct(){}
    ganesh(device:any){
      this.ganesh1 = true;
    }

    ngOnDestroy(){
      this.back.unsubscribe();
      this.xyz.unsubscribe();
    
    }

    showDetails(){
      this.ganesh1 = true;
    }

    generateReport(){
      this.gg=false;
    }

}
